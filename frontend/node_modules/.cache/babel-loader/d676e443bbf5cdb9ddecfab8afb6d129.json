{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\gabri\\\\OneDrive\\\\Desktop\\\\karm_noncelafacciopiu\\\\frontend\\\\src\\\\componenti\\\\PagineCliente\\\\InserimentoParcheggio.js\";\nimport { Listaveicolidisponibili } from \"../../actions/veicoliActions\";\nimport React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport { Link, withRouter } from \"react-router-dom\"; //componenti da react-bootstrap\n\nimport { Container, Col, Row, Modal, Button, Card } from \"react-bootstrap\";\nimport \"../../App.css\";\nimport classnames from \"classnames\";\nimport Mappa from \"../googlemap/mappa\";\nimport filtriVeicoli from \"../../utils/filtriVeicoli\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass InserimentoParcheggio extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      errors: {},\n      filtroModello: \"\",\n      filtroCilindrata: \"\",\n      current_id: \"\",\n      veicoli_inparcheggio: [] //per fare capienza mettere dentro tutti i veicoli del parcheggio selezionato e in caso restituire error\n\n    };\n\n    this.onChange = async e => {\n      await this.setState({\n        [e.target.id]: e.target.value\n      });\n    };\n\n    this.onSubmit = e => {\n      e.preventDefault();\n    };\n  }\n\n  aggiungiVeicolo(idVeicolo, posizione) {\n    localStorage.setItem(\"idVeicolo\", idVeicolo);\n    localStorage.setItme(\"posizioneVeicolo\", posizione);\n    window.location.href = \"/InserimentoParcheggio\";\n  }\n\n  async componentDidMount() {\n    const Veicolo = {\n      tipo: localStorage.getItem(\"tipoVeicolo\")\n    };\n    await this.props.Listaveicolidisponibili(localStorage.getItem(\"tipoVeicolo\"), Veicolo);\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (nextProps.errors) {\n      this.setState({\n        errors: nextProps.errors\n      });\n    }\n  }\n\n  render() {\n    const {\n      filtroTipo,\n      filtroParcheggio,\n      filtroID,\n      errors\n    } = this.state;\n    let veicoliFiltrati = [];\n    const {\n      veicolo\n    } = this.props.listaveicolidisponibili;\n    let stile = \"\";\n    veicoliFiltrati = filtriVeicoli(veicolo, filtroTipo, \"tipo\");\n    veicoliFiltrati = filtriVeicoli(veicoliFiltrati, filtroID, \"_id\");\n    if (localStorage.getItem(\"posizioneVeicolo\").startsWith(\"6\")) stile = \"Sì\";else stile = \"No\";\n\n    switch (stile) {\n      case \"Sì\":\n        return /*#__PURE__*/_jsxDEV(Container, {\n          fluid: true,\n          children: /*#__PURE__*/_jsxDEV(Row, {\n            className: \"justify-content-md-center\",\n            children: /*#__PURE__*/_jsxDEV(Mappa, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 71,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 11\n        }, this);\n\n      case \"No\":\n        {\n          return /*#__PURE__*/_jsxDEV(Container, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 16\n          }, this);\n        }\n    }\n  }\n\n}\n\nInserimentoParcheggio.propTypes = {\n  Listaveicolidisponibili: PropTypes.func.isRequired,\n  auth: PropTypes.object.isRequired,\n  errors: PropTypes.object.isRequired,\n  listaveicolidisponibili: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n  auth: state.auth,\n  errors: state.errors,\n  listaveicolidisponibili: state.listaveicolidisponibili\n});\n\nexport default connect(mapStateToProps, {\n  Listaveicolidisponibili\n})(InserimentoParcheggio);","map":{"version":3,"sources":["C:/Users/gabri/OneDrive/Desktop/karm_noncelafacciopiu/frontend/src/componenti/PagineCliente/InserimentoParcheggio.js"],"names":["Listaveicolidisponibili","React","Component","PropTypes","connect","Link","withRouter","Container","Col","Row","Modal","Button","Card","classnames","Mappa","filtriVeicoli","InserimentoParcheggio","state","errors","filtroModello","filtroCilindrata","current_id","veicoli_inparcheggio","onChange","e","setState","target","id","value","onSubmit","preventDefault","aggiungiVeicolo","idVeicolo","posizione","localStorage","setItem","setItme","window","location","href","componentDidMount","Veicolo","tipo","getItem","props","componentWillReceiveProps","nextProps","render","filtroTipo","filtroParcheggio","filtroID","veicoliFiltrati","veicolo","listaveicolidisponibili","stile","startsWith","propTypes","func","isRequired","auth","object","mapStateToProps"],"mappings":"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","sourcesContent":["import { Listaveicolidisponibili } from \"../../actions/veicoliActions\";\r\nimport React, { Component } from \"react\";\r\n\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport { Link, withRouter } from \"react-router-dom\";\r\n\r\n//componenti da react-bootstrap\r\nimport { Container, Col, Row, Modal, Button, Card } from \"react-bootstrap\";\r\n\r\nimport \"../../App.css\";\r\nimport classnames from \"classnames\";\r\nimport Mappa from \"../googlemap/mappa\";\r\n\r\nimport filtriVeicoli from \"../../utils/filtriVeicoli\";\r\n\r\nclass InserimentoParcheggio extends Component {\r\n  state = {\r\n    errors: {},\r\n    filtroModello: \"\",\r\n    filtroCilindrata: \"\",\r\n    current_id: \"\",\r\n    veicoli_inparcheggio: [], //per fare capienza mettere dentro tutti i veicoli del parcheggio selezionato e in caso restituire error\r\n  };\r\n\r\n  aggiungiVeicolo(idVeicolo, posizione) {\r\n    localStorage.setItem(\"idVeicolo\", idVeicolo);\r\n    localStorage.setItme(\"posizioneVeicolo\", posizione);\r\n    window.location.href = \"/InserimentoParcheggio\";\r\n  }\r\n\r\n  async componentDidMount() {\r\n    const Veicolo = {\r\n      tipo: localStorage.getItem(\"tipoVeicolo\"),\r\n    };\r\n    await this.props.Listaveicolidisponibili(\r\n      localStorage.getItem(\"tipoVeicolo\"),\r\n      Veicolo\r\n    );\r\n  }\r\n  componentWillReceiveProps(nextProps) {\r\n    if (nextProps.errors) {\r\n      this.setState({\r\n        errors: nextProps.errors,\r\n      });\r\n    }\r\n  }\r\n\r\n  onChange = async (e) => {\r\n    await this.setState({ [e.target.id]: e.target.value });\r\n  };\r\n\r\n  onSubmit = (e) => {\r\n    e.preventDefault();\r\n  };\r\n\r\n  render() {\r\n    const { filtroTipo, filtroParcheggio, filtroID, errors } = this.state;\r\n    let veicoliFiltrati = [];\r\n    const { veicolo } = this.props.listaveicolidisponibili;\r\n    let stile = \"\";\r\n    veicoliFiltrati = filtriVeicoli(veicolo, filtroTipo, \"tipo\");\r\n    veicoliFiltrati = filtriVeicoli(veicoliFiltrati, filtroID, \"_id\");\r\n    if (localStorage.getItem(\"posizioneVeicolo\").startsWith(\"6\")) stile = \"Sì\";\r\n    else stile = \"No\";\r\n    switch (stile) {\r\n      case \"Sì\":\r\n        return (\r\n          <Container fluid>\r\n            <Row className=\"justify-content-md-center\">\r\n              <Mappa />\r\n            </Row>\r\n          </Container>\r\n        );\r\n      case \"No\": {\r\n        return <Container></Container>;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nInserimentoParcheggio.propTypes = {\r\n  Listaveicolidisponibili: PropTypes.func.isRequired,\r\n  auth: PropTypes.object.isRequired,\r\n  errors: PropTypes.object.isRequired,\r\n  listaveicolidisponibili: PropTypes.object.isRequired,\r\n};\r\nconst mapStateToProps = (state) => ({\r\n  auth: state.auth,\r\n  errors: state.errors,\r\n  listaveicolidisponibili: state.listaveicolidisponibili,\r\n});\r\nexport default connect(mapStateToProps, {\r\n  Listaveicolidisponibili,\r\n})(InserimentoParcheggio);\r\n"]},"metadata":{},"sourceType":"module"}